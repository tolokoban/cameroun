function precache(){return caches.open(CACHE).then(function(e){return e.addAll(["./index.html","./js/@index.js","./css/@index.css","./css/font.josefin/josefin.woff2","./css/tfw.zip/deflate.js","./css/tfw.zip/inflate.js","./css/tfw.zip/z-worker.js","./css/app/background.png"])})}function fromCache(e){return caches.open(CACHE).then(function(n){return n.match(e).then(function(e){return e||Promise.reject("no-match")})})}function update(e){return caches.open(CACHE).then(function(n){return fetch(e).then(function(r){return n.put(e,r)})})}var window=self;window.require=function(){var e={},n={},r="function"==typeof window.require?window.require:null,t=function(o,i){if("node://"==o.substr(0,7)){if(!r)throw Error("[require] NodeJS is not available to load module `"+o+"`!");return r(o.substr(7))}if("function"==typeof i)return void(n[o]=i);var a;if(i=n[o],"undefined"==typeof i){var s=new Error("Required module is missing: "+o);throw console.error(s.stack),s}if(a=e[o],"undefined"==typeof a){a={exports:{}};var u=a.exports;i(t,a,u),e[o]=a.exports,a=a.exports}return a};return t}(),require("$",function(e,n,r){r.config={name:'"cameroun"',description:'"Cameroun"',author:'"tolokoban"',version:'"0.1.1"',major:"0",minor:"1",revision:"1",date:"2017-02-11T12:38:09.000Z",consts:{tfw:"tfw"}};var t=null;r.lang=function(e){return void 0===e&&(window.localStorage&&(e=window.localStorage.getItem("Language")),e||(e=window.navigator.language,e||(e=window.navigator.browserLanguage,e||(e="fr"))),e=e.substr(0,2).toLowerCase()),t=e,window.localStorage&&window.localStorage.setItem("Language",e),e},r.intl=function(e,n){var t,o,i,a,s,u,c,f=e[r.lang()],l=n[0];for(c in e)break;if(!c)return l;if(!f&&(f=e[c],!f))return l;if(t=f[l],t||(f=e[c],t=f[l]),!t)return l;if(n.length>1){for(o="",s=0,i=0;i<t.length;i++)a=t.charAt(i),"$"===a?(o+=t.substring(s,i),i++,u=t.charCodeAt(i)-48,o+=u<0||u>=n.length?"$"+t.charAt(i):n[u],s=i+1):"\\"===a&&(o+=t.substring(s,i),i++,o+=t.charAt(i),s=i+1);o+=t.substr(s),t=o}return t}});var VERSION=1,CACHE="cache-and-update";self.addEventListener("install",function(e){console.log("The service worker is being installed."),e.waitUntil(precache())}),self.addEventListener("fetch",function(e){console.log("The service worker is serving the asset."),e.respondWith(fromCache(e.request)),e.waitUntil(update(e.request))});
//# sourceMappingURL=mod/offline.wrk.map