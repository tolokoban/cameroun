// Si un seul octet de ce fichier change, le cache est rechargé.
// Mais comme les commentaires sont supprimé par le minifier,
// on utilise cette variable.
var VERSION = 1;

// L'identifiant de ma mémoire cache.  On  met ce qu'on veut, c'est au
// cas où on voudrait utiliser plusieurs caches.
var CACHE = 'cache-and-update';

// Dans les workers, l'objet `self` remplace `window` qui n'existe pas.
self.addEventListener('install', function(evt) {
  console.log('The service worker is being installed.');
  evt.waitUntil(precache());
});

// L'event `fetch` se déclenche à chaque  fois que le browser a besoin
// d'un fichier.
self.addEventListener('fetch', function(evt) {
  console.log('The service worker is serving the asset.');
  evt.respondWith(fromCache(evt.request));
  evt.waitUntil(update(evt.request));
});

// A  l'installation du  serviec worker,  je  mets en  cache tous  les
// fichiers de mon projet.
function precache() {
  return caches.open(CACHE).then(function (cache) {
    return cache.addAll([
      './index.html',
      './js/@index.js',
      './css/@index.css',
      './css/font.josefin/josefin.woff2',
      './css/tfw.zip/deflate.js',
      './css/tfw.zip/inflate.js',
      './css/tfw.zip/z-worker.js',
      './css/app/background.png'
    ]);
  });
}

// Récupérer un fichier depuis le cache.
function fromCache(request) {
  return caches.open(CACHE).then(function (cache) {
    return cache.match(request).then(function (matching) {
      return matching || Promise.reject('no-match');
    });
  });
}

// Mettre à jour le cache avec le nouveau contenu d'un fichier.
function update(request) {
  return caches.open(CACHE).then(function (cache) {
    return fetch(request).then(function (response) {
      return cache.put(request, response);
    });
  });
}
