var VERSION = "201702112338";
console.log("[SW] " + VERSION);

// L'identifiant de ma mémoire cache.  On  met ce qu'on veut, c'est au
// cas où on voudrait utiliser plusieurs caches.
var CACHE = 'cache-and-update';

// Dans les workers, l'objet `self` remplace `window` qui n'existe pas.
self.addEventListener('install', function(evt) {
    console.log('[SW] Installed.');
    evt.waitUntil(precache());
});

// L'event `fetch` se déclenche à chaque  fois que le browser a besoin
// d'un fichier.
self.addEventListener('fetch', function(evt) {
    var url = evt.request.url;
    console.log('[SW] Serving the asset: ', url);
    if( url.indexOf('svc.php') == -1 ) {
        evt.respondWith(fromCache(evt.request));
        evt.waitUntil(update(evt.request));
    } else {
        console.log("Service! Never from cache.");
        fetch(url, {
            method: 'GET',
            mode: 'cors',
            cache: 'no-cache'
        }).then( evt.respondWith );
    }
});

// A  l'installation du  serviec worker,  je  mets en  cache tous  les
// fichiers de mon projet.
function precache() {
    return caches.open(CACHE).then(function (cache) {
        return cache.addAll([
            './index.html',
            './js/@index.js',
            './css/@index.css',
            './css/font.josefin/josefin.woff2',
            './css/font.mystery-quest/mystery-quest-400.woff2',
            './css/tfw.zip/deflate.js',
            './css/tfw.zip/inflate.js',
            './css/tfw.zip/z-worker.js',
            './css/app/background.png'
        ]);
    });
}

// Récupérer un fichier depuis le cache.
function fromCache(request) {
    return caches.open(CACHE).then(function (cache) {
        return cache.match(request).then(function (matching) {
            return matching || Promise.reject('no-match');
        });
    });
}

// Mettre à jour le cache avec le nouveau contenu d'un fichier.
function update(request) {
    return caches.open(CACHE).then(function (cache) {
        return fetch(request).then(function (response) {
            return cache.put(request, response);
        });
    });
}
